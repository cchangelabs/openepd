[tool.poetry]
name = "openepd"
version = "1.3.0"
license = "Apache-2.0"
description = "Python library to work with OpenEPD format"
authors = ["C-Change Labs <support@c-change-labs.com>"]
maintainers = ["C-Change Labs <open-source@c-change-labs.com>"]
repository = "https://github.com/cchangelabs/openepd"
keywords = []
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
readme = "README.md"
packages = [{include = "openepd", from = "src"}]
exclude = ["**/test_*.py", "**/tests/**"]

[tool.poetry.dependencies]
python = "^3.11"
pydantic = ">=1.10,<2.0"
email-validator = ">=1.3.0"
requests = { version = ">=2.0", optional = true }

# Optional dependencies
# lxml = { version = "~=4.9.2", optional = true }

[tool.poetry.dev-dependencies]
# Unit tests
coverage = { version = "=6.5", extras = ["toml"] }
pytest = "~=7.2"
pytest-subtests = "~=0.4"
pytest-cov = "~=4.0"
teamcity-messages = ">=1.31"
wheel = "~=0.40.0"

# Dev tools
black = "~=22.3"
licenseheaders = "~=0.8"
flake8 = "~=4.0"
flake8-import-graph = "~=0.1.3"
flake8-docstrings = "~=1.7.0"
isort = "~=5.11"
mypy = ">=1.0.1"
pre-commit = "~=2.19"
commitizen = "~=2.42.1"

# Type checking
types-dateparser = ">=1.1.3"
types-deprecated = ">=1.2.9"
types-requests = ">=2.0"

[tool.poetry.extras]
api_client = ["requests"]


[tool.commitizen]
version = "1.3.0"
bump_version = "bump: version $current_version â†’ $new_version"
update_changelog_on_bump = true
pre_bump_hooks = []
version_files = [
    "pyproject.toml",
    "src/openepd/__version__.py",
]

[tool.black]
line-length = 120
target-version = ['py311']
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 120
force_sort_within_sections = "true"
atomic = "true"

# Tests and Coverage
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "--maxfail=50"
python_files = ["test_*.py"]
required_plugins = ["pytest-subtests", "pytest-cov"]
testpaths = ["src"]

[tool.coverage.run]
branch = false

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "coverage_report/htmlcov"

[tool.mypy]
python_version = "3.11"
show_error_codes = true
ignore_errors = false
warn_return_any = false
disallow_any_generics = false
pretty = true
mypy_path = "$MYPY_CONFIG_FILE_DIR/stubs"
exclude = ["test_.*\\.py$", ]

[[tool.mypy.overrides]]
# External libs which doesn't have type hints (py.typed marker)
module = []
ignore_missing_imports = true
follow_imports = "skip"
