[tool.poetry]
name = "openepd"
version = "6.15.0"
license = "Apache-2.0"
description = "Python library to work with OpenEPD format"
authors = ["C-Change Labs <support@c-change-labs.com>"]
maintainers = ["C-Change Labs <open-source@c-change-labs.com>"]
repository = "https://github.com/cchangelabs/openepd"
keywords = []
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
readme = "README.md"
packages = [{ include = "openepd", from = "src" }]
exclude = ["**/test_*.py", "**/tests/**"]

[tool.poetry.dependencies]
python = "^3.11"
pydantic = ">=1.10,<3.0"
email-validator = ">=1.3.1"
requests = { version = ">=2.0", optional = true }
idna = ">=3.7"
open-xpd-uuid = "~=0.2.1"
openlocationcode = ">=1.0.1"

# Optional dependencies
# lxml = { version = "~=4.9.2", optional = true }

[tool.poetry.group.dev.dependencies]
# Unit tests
coverage = { version = "=6.5", extras = ["toml"] }
pytest = "~=7.2"
pytest-subtests = "~=0.4"
pytest-cov = "~=4.0"
teamcity-messages = ">=1.31"
wheel = "~=0.40.0"
click = "~=8.1.7"

# Dev tools
ruff = ">=0.11.8"
licenseheaders = "~=0.8"
mypy = ">=1.0.1"
pre-commit = "~=2.19"
commitizen = "~=3.16.0"

# Type checking
types-dateparser = ">=1.1.3"
types-deprecated = ">=1.2.9"
types-requests = ">=2.0"

# Code generation
# For list of countries
pycountry = ">=24.6.1"
jinja2 = ">=3.1.4"


[tool.poetry.extras]
api_client = ["requests"]

[tool.commitizen]
version_provider = "poetry"
bump_version = "bump: version $current_version â†’ $new_version"
update_changelog_on_bump = true
pre_bump_hooks = []
version_files = [
    "src/openepd/__version__.py",
]

[tool.black]
line-length = 120
target-version = ['py311']
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 120
force_sort_within_sections = "true"
atomic = "true"

# Tests and Coverage
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "--maxfail=50"
python_files = ["test_*.py"]
required_plugins = ["pytest-subtests", "pytest-cov"]
testpaths = ["src"]

[tool.coverage.run]
branch = false

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "coverage_report/htmlcov"

[tool.mypy]
python_version = "3.11"
show_error_codes = true
ignore_errors = false
warn_return_any = false
disallow_any_generics = false
pretty = true
mypy_path = "$MYPY_CONFIG_FILE_DIR/stubs"
plugins = ["pydantic.mypy"]
exclude = ["test_.*\\.py$", ]

[[tool.mypy.overrides]]
# External libs which doesn't have type hints (py.typed marker)
module = []
ignore_missing_imports = true
follow_imports = "skip"


[[tool.mypy.overrides]]
module = "openlocationcode.*"
ignore_missing_imports = true

[tool.ruff]
line-length = 120
target-version = "py311"
exclude = [".*pyi", "tools/**.py"]

[tool.ruff.lint.isort]
force-sort-within-sections = true

[tool.ruff.lint]
extend-ignore = [
    "S101", # Use of assert statement. We have a lot of asserts for mypy type checking.
    "W291", # W291 trailing whitespace
    "W391", # W391 blank line at end of file
    "E501", # E501: line too long
    "E203", # E704: Multiple statements on one line (def)
    "F403", #F403 'from module import *' used; unable to detect undefined names (F403)
    ##### DOCSTRINGS #####
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Docstring of prublic method
    "D107", # Missing docstring in __init__
    "D105", # Missing docstring in magic method
    "D104", # Missing docstring in public package
    "D106", # Missing docstring in public nested class
    "D202", # D202 No blank lines allowed after function docstring
    "D203", # We want to have blank line before class
    "D212", # We want to require second line for multiline docstrings
]
extend-select = ["S", "E", "B", "A", "EM", "UP", "LOG", "G", "I", "D"]
